import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
import time

class SwerveAutoCommander(Node):
    def __init__(self):
        super().__init__('swerve_auto_commander')
        self.pub = self.create_publisher(Twist, '/swerve_drive/cmd_vel', 10)
        self.timer = self.create_timer(0.1, self.timer_callback)  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏∏‡∏Å 100ms

        # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏û‡∏£‡πâ‡∏≠‡∏° speed scaling (scale = ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå) ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (duration)    x,y,z,scale_speed,duration
        self.commands = [
            ("STOP", 1.0, 0.0, 0.0, 0.01, 3),  # duration = 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            ("Forward", 1.0, 0.0, 0.0, 1, 2),  # duration = 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏°
            #("Forward", 1.0, 0.0, 0.0, 0.8, 2.5),  # duration = 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            ("STOP", 1.0, 0.0, 0.0, 0.01, 3),  # duration = 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            ("Backward", -1.0, 0.0, 0.0, 1, 2),  # duration = 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            #("Backward", -1.0, 0.0, 0.0, 0.8, 2.5),  # duration = 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            #("STOP", -1.0, 0.0, 0.0, 0.01, 1),  # duration = 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            #("Right", 0.0, -1.0, 0.0, 1, 1),
            #("STOP", 0.0, -1.0, 0.0, 0.01, 1),  # duration = 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            #("Left", 0.0, 1.0, 0.0, 1, 1),
            #("STOP", 0.0, 1.0, 0.0, 0.01, 1),  # duration = 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            #("Forward-Left", 0.7, 0.7, 0.0, 1, 1),
            #("STOP", 0.7, 0.7, 0.0, 0.01, 1),  # duration = 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            #("Forward-Right", 0.7, -0.7, 0.0, 1, 1),
            #("STOP", 0.7, -0.7, 0.0, 0.01, 1),  # duration = 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            #("Backward-Left", -0.7, 0.7, 0.0, 1, 1),
            #("Stop", -0.7, 0.7, 0.0, 0.01, 1),
            #("Backward-Right", -0.7, -0.7, 0.0, 1, 1),
            #("STOP", -0.7, -0.7, 0.0, 0.01,1),
            #("Rotate", 0.0, 0.0, 3.0, 1, 1),
            #("Stop", 0.0, 0.0, 0.01, 1, 1),
            #("Forward-rotate", 0.7, 0.7, 0.7, 1, 5),
            #("Curve-left", 0.7, 0.0, 0.7, 1, 1),
        ]

        self.index = 0
        self.start_time = time.time()  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏£‡∏Å
        self.command_duration = self.commands[0][5]  # ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏£‡∏Å
        self.sent_first_command = False  # ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á

    def timer_callback(self):
        now = time.time()
        if self.index < len(self.commands):
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß
            if not self.sent_first_command:
                # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
                label, x, y, z, scale, duration = self.commands[self.index]
                cmd = Twist()
                cmd.linear.x = x * scale
                cmd.linear.y = y * scale
                cmd.angular.z = z * scale
                self.pub.publish(cmd)
                self.get_logger().info(f'‚ñ∂ Command: {label} | x={cmd.linear.x:.2f}, y={cmd.linear.y:.2f}, z={cmd.angular.z:.2f} | Duration: {duration} seconds')
                self.sent_first_command = True
                self.start_time = now  # ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á

            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß
            if now - self.start_time > self.command_duration:
                self.index += 1  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                if self.index < len(self.commands):
                    self.sent_first_command = False  # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                    self.command_duration = self.commands[self.index][5]  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà
                    self.start_time = now  # ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á

        else:
            self.stop_robot()  # ‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á

    def stop_robot(self):
        """‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå"""
        stop_cmd = Twist()
        self.pub.publish(stop_cmd)
        self.get_logger().info("üõë ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡πà‡∏á cmd_vel = ‡∏®‡∏π‡∏ô‡∏¢‡πå)")
        self.destroy_timer(self.timer)

def main(args=None):
    rclpy.init(args=args)
    node = SwerveAutoCommander()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.get_logger().info('üëã ‡∏ñ‡∏π‡∏Å‡∏Å‡∏î Ctrl+C ‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå...')
        node.stop_robot()

    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == "__main__":
    main()




